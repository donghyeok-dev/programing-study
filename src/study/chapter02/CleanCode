원초적난제
기한을 맞추려고 나쁜 코드를 양산하려는 습관이 있는데, 사실 기한을 맞추기 위한 방법은 코드를 최대한 깨끗하게 유지하는 습관이다.
깨끗한 코드를 어떻게 작성할것인가?
좋은 코드와 나쁜 코드를 구분하고 나쁜 코드를 좋은 코드로 바꾸는 전략도 파악하는 코드 감각이 필요하다.

비야네 스트롭스트룹, c++창시자
- 논리가 심플하고 의존성을 최대한 줄여야 유지보수가 쉬워진다.
- 창문이 깨진 건물은 창문이 더 깨져도 상관하지 않는다. 즉 나쁜 코드는 더 나쁜 코드를 양산할 수 있다라는 뜻.
- 오류 처리를 철저하게 해야 된다.

그래디 부치
- 명쾌한 추상화와 단순한 제어문을 사용해야 된다.
- 가독성 좋은 코드를 작성해라.

큰 데이브 토마스
- 단위테스트 케이스와 인수 테스트 케이스를 작성해라.
- 의존성은 최소화하며 각 의존성을 명확히 정의한다.
- 고치기 쉬운코드를 작성해라.

마이클 페더스
- 세세한 사항까지 꼼꼼하게 신경쓴 코드를 작성해라.

론 제프리스
- 테스트 코드를 통한 리팩토링
- 함수나 변수에 의미 있는 이름 짓기
- 초기부터 추상화 고려하기

보이스카우트 규칙
- 캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라
- 체크아웃할 때보다 좀 더 깨끗한 코드를 체크인한다면 코드는 절대 나빠지지 않는다.

프리퀄과 원칙
- SRP, OCP, DIP 등의 PPP(프리퀄) 책에서 표명한 설계 원칙을 준수해라.
