현실세계의 업무들을 처리하기 위하여 추출 가공한 정보를 데이터라고 합니다.

데이터베이스 시스템이란 데이터를 중앙에서 통제할 수 있게 하여 데이터의 중복이나 불일치성을 없애고,
데이터를 여러 사용자가 이용할 수 있도록하는 시스템입니다.
데이터베이스(DB) <-> 데이터베이스 관리 시스템(DBMS) <-> 사용자

데이터베이스 관리시스템(Database Management System, DBMS)이란 사용자가 데이터베이스의 생성, 유지 및 사용을 제어하는 소프트웨어 시스템입니다.

데이터 모델(Data Model)이란 데이터베이스를 설계하고 관리할 때 필요한 기법의 기초를 제공하기 위해 구성되는 것으로, 데이터와 데이터간의 관계를 어떻게 표현하고
저장하는가에 따라 계층형 데이터 모델, Network 데이터 모델, 관계형(Relational) 데이터 모델, 객체지향형(Object Oriented) 데이터 모델로 구분한다.

HDBMS: 계층형 데이터베이스 관리시스템
RDBMS: 관계형 데이터베이스 관리시스템

데이터베이스 언어: DBMS 종류에따라 사용언어가 다를수 있으며, 처리 기능에 따라 데이터 정의어(DDL), 데이터 조작어(DML), 데이터 제어어(DCL)로 구분한다.
데이터 정의어(DDL): CREATE, ALTER, DROP
데이터 조작어(DML): SELECT, INSERT, UPDATE, DELETE
데이터 제어어(DCL): COMMIT, ROLLBACK, GRANT, REVOKE

사용자: 응용프로그래머(Application Programmer), 개체(entity)나 관계들을 정의하고 데이터베이스를 구축하는 데이터베이스 설계자(Database Designer), 총괄(Database Administrator)가 있음.

관계형 데이터 모델(Relational Data Model)는
현재 많은 업체에서 사용하고 있는 데이터 베이스 모델이며, Oracle, SQL Server, MySql, DB2, Sysbase 등의 관리시스템(RDBMS)의 제품이 있습니다.
관계형 데이터베이스(RDB)는 논리적인 2차원 테이블(행, 열)의 데이터베이스 구조로 표현합니다.
정보의 표현은 개념적 데이터로 개체(entity), 속성(attribute), 인스턴스(instance), 릴레이션(relation)들을 ER Diagram으로 표현하고,
관계형 모델에 의해 표현되는 논리적 스키마(schema)는 테이블이나 뷰, 인덱스 등으로 변환된다.

- 모든 개체(entity)는 개체를 설명해 주는 속성의 집합을 갖는다.
- 행은 속성 값 중 하나의 인스턴스이다.
- 개체의 속성 중 어떤 속성은 개체의 각 행을 유일하게 식별한다.
- 기본키를 구성하는 속성은 널이 될수 없다.
- 개체는 서로 관계가 있다.
- 개체의 행은 순서가 임의적이다.
- 개체의 속성은 순서가 임의적이다.

관계형 데이터베이스 특징
- 2차 행렬의 테이블 집합으로 표현.
- 각 테이블은 행(row)와 열(column)으로 구성
- 데이블에서 각 행은 유일하게 구별되는 특징.
- 각 컬럼들은 데이터 무결성(data integrity)를 보장받아야 함.
- 사용자는 테이블에 대한 정의, 데이터 조작 및 데이터 검색을 SQL을 이용하여 수행한다.
- 관계형 데이터베이스 언어 SQL, PL/SQL을 사용한다.

테이블: 기본적인 데이터의 저장구조로 1개 이상의 컬럼과 0개 이상의 행(row)로 구성된다.
칼럼(column): 테이블 상에서 단일 종류의 데이터를 나타내며 데이터타입과 크기를 갖고 있다.
행(row): 칼럼들의 값의 조합이며 레코드라고도 부른다.
키: 테이블에는 여러개의 column이 있고, 특별한 의미를 갖는 column을 key라고 한다.
    관계형 데이터베이스에는 기본키와 후보키, 복합키, 외부키가 있다.
기본키: 한 테이블의 각각의 행을 유일하게 식별해 주는 한 칼럼 또는 칼럼의 조합을 말한다.
후보키: 테이블 컬럼 중 기본 키가 될 수 있는 컬럼을 후보키 또는 보조키라고 부른다.
복합키: 테이블의 컬럼 중 한개 이상의 컬럼을 조합하여 식별하는 키를 복합키라고 부른다.
외부키: 애플리케이션을 개발할 때 업무의 성격이나 데이터의 중복을 최소화 하기 위해 데이터를 여러개의 테이블로 분리하여 저장한다.
        분리된 테이블들은 관계를 통해 연결되는데 외래키는 다른 테이블의 기본키를 참조하는 컬럼을 말한다.

관계형 데이터베이스 객체
스키마: 데이터베이스 내의 구조와 제약 조건을 정의 한 것 이라고 볼 수 있으며, 사용자의 따라 접근을 제한하는 등의 관리가 가능한 집합을 이야기 합니다.
테이블: 행과 열의 조합으로 구성된 데이터베이스의 기본 저장 단위
뷰 : 하나 또는 그 이상의 테이블로부터 논리적으로 데이터를 추출한 부분 집합으로 논리적이고 가상적인 테이블.
시퀀스: 자동으로 고유한 숫자 값을 생성해 주며, 주로 기본 키 값을 생성하기 위해 사용.
        장점:
            SGA 공유메모리에 CACHE_SIZE만큼 미리 번호를 생성할 수 있기 때문에 동시에 많은 양의 Transaction이 발생할 때 빠른 속도로 대응이 가능합니다.
        단점:
            transaction이 rollback되면 생성한 시퀀스 번호는 원복되지 않고 사라지며, 오라클 서버가 다운되면 캐쉬 메모리에 생성해둔 시퀀스 번호가 리셋되므로 번호 순서 사이에 갭이 발생할 수 있습니다.
AUTO_INCREMENT: Mysql에서 컬럼의 자동증가 값을 설정.
identify: MSSQL에서 컬럼의 자동증가 값 설정.
인덱스: 쿼리 속도를 향상 시키기 위해 사용.
synonym(시노님, 동의어): 객체에 대한 또다른 이름으로 별명(alias) 부여하는 것으로 oracle의 경우 private와 public으로 지정할수도 있습니다.
        장점:
        객체의 이름이 변경되었을 때 변경된 테이블에 시노님만 정의하면 프로그램의 SQL부분은 변경하지 않아도 됩니다.
        긴 객체의 이름을 짧은 이름으로 지정하여 사용할 수 있습니다.
        객체의 실제이름을 감춤으로써 보안적인 측면에서 도움이됨.
        사용:
        CREATE SYNONYM uAccount FOR user.Account;
        DROP SYNONYM uAccount;

SQL(Structured Query Language) : 사용자가 데이터를 정의하고 데이터를 조작하기 위해 접근하는 비절차적 데이터베이스 언어입니다.
PL/SQL: 데이터베이스 환경에서 실행되는 절차적인 데이터베이스 프로그래밍 언어입니다.
프로시저나 Function의 장점: 처음 한번만 컴파일하고 재컴파일하지 않으므로 속도가 빠르고, 네트워크 트래픽이 감소합니다.
                      단점: 확정성이 좋지 않습니다. 사용자가 많아져 서버수를 늘려야할 때 애플리케이션 서버를 늘리는 것보다 데이터베이스 서버를 늘리는 것이 더 어렵습니다.
                            디버깅이 어렵고, 개발관리 포인트가 증가합니다.
프로시저: PL/SQL로 작성된 서브프로그램이고 클라이언트가 아닌 데이터베이스 서버에서 동작합니다. 복잡한 로직을 캡슐화 하여 모듈화가 가능합니다.
Function: 프로시저와 마찬가지로 PL/SQL로 작성된 서브 프로그램입니다. 프로시저와 차이점은 기술 방법과 호출 방식이 다르며 실행 후 반드시 하나의 값을 반환합니다.
package: 프로시저와 함수들의 집합이며 선언부와 본문으로 나뉘어집니다. 선언부에는 프로시저, 함수, 커서, 변수 등을 선언하고, 본문에는 프로시저나 함수의 실제 구현이 포함됩니다.
trigger: 테이블에 대한 이벤트에 반응해 자동으로 실행되는 작업을 의미합니다.
         장점: 특정 작업의 자동화처리가 쉽습니다.
         단점: 트리거 처리는 백그라운드에서 처리되므로 트리거를 인식하지 못하여 오류를 발생시킬 수 있고 빠르게 오류를 캐치할 수 없는 부분도 있습니다.
